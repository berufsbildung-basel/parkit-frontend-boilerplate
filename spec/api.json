{
  "openapi" : "3.0.3",
  "info" : {
    "contact" : {
      "email" : "apprentices@adobe.com",
      "name" : "Adobe Basel Apprentice Team",
      "url" : "https://adobe.com"
    },
    "description" : "API for managing parking reservations",
    "license" : {
      "name" : "Copyright 2023 Adobe Inc. All rights reserved."
    },
    "title" : "Parking Reservation System API",
    "version" : "0.0.1"
  },
  "servers" : [ {
    "description" : "Production server",
    "url" : "http://localhost:1234/api"
  }, {
    "description" : "Test server",
    "url" : "http://localhost:1234/api"
  }, {
    "description" : "Development server",
    "url" : "http://localhost:1234/api"
  } ],
  "paths" : {
    "/users" : {
      "get" : {
        "operationId" : "listUsers",
        "parameters" : [ {
          "description" : "Offset for pagination. When provided, server skips first n elements.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the page size for pagination.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 100,
            "minimum" : 1,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "By which field to sort the result.",
          "explode" : true,
          "in" : "query",
          "name" : "sortBy",
          "required" : false,
          "schema" : {
            "default" : "createdAt",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the order of results",
          "explode" : true,
          "in" : "query",
          "name" : "order",
          "required" : false,
          "schema" : {
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserListResponse"
                }
              }
            },
            "description" : "Users found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "List users",
        "tags" : [ "users" ]
      }
    },
    "/users/{id}" : {
      "get" : {
        "operationId" : "getUser",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "Parking spot found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Get a user",
        "tags" : [ "users" ]
      },
      "patch" : {
        "operationId" : "updateUser",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "User updated successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Update a user",
        "tags" : [ "users" ]
      }
    },
    "/users/{id}/disable" : {
      "put" : {
        "operationId" : "disableUser",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "User disabled successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Disable a user (denied login and cannot make reservations)",
        "tags" : [ "users" ]
      }
    },
    "/users/{id}/enable" : {
      "put" : {
        "operationId" : "enableUser",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "User enabled successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Enable a user (can login and make reservations again)",
        "tags" : [ "users" ]
      }
    },
    "/parking-spots" : {
      "get" : {
        "operationId" : "listParkingSpots",
        "parameters" : [ {
          "description" : "Offset for pagination. When provided, server skips first n elements.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the page size for pagination.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 100,
            "minimum" : 1,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "By which field to sort the result.",
          "explode" : true,
          "in" : "query",
          "name" : "sortBy",
          "required" : false,
          "schema" : {
            "default" : "createdAt",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the order of results",
          "explode" : true,
          "in" : "query",
          "name" : "order",
          "required" : false,
          "schema" : {
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpotListResponse"
                }
              }
            },
            "description" : "Parking spots found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "List parking spots",
        "tags" : [ "parking-spots" ]
      },
      "post" : {
        "operationId" : "createParkingSpot",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ParkingSpot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpot"
                }
              }
            },
            "description" : "Parking spot created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Create a new parking spot",
        "tags" : [ "parking-spots" ]
      }
    },
    "/parking-spots/availability" : {
      "get" : {
        "operationId" : "availability",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AvailabilityCheckRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AvailabilityResponse"
                }
              }
            },
            "description" : "Availability retrieved"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Returns available parking spots for a given date, user and vehicle",
        "tags" : [ "parking-spots" ]
      }
    },
    "/parking-spots/today" : {
      "get" : {
        "operationId" : "parkingSpotsToday",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpotWithReservationsAndVehicles"
                }
              }
            },
            "description" : "Parking spots found with optional reservations + vehicles today"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "List parking spots and any reservations + vehicles on today's date",
        "tags" : [ "parking-spots" ]
      }
    },
    "/parking-spots/{id}" : {
      "get" : {
        "operationId" : "getParkingSpot",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpot"
                }
              }
            },
            "description" : "Parking spot found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Get a parking spot",
        "tags" : [ "parking-spots" ]
      },
      "patch" : {
        "operationId" : "updateParkingSpot",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ParkingSpot"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpot"
                }
              }
            },
            "description" : "Parking spot updated successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Update a parking spot",
        "tags" : [ "parking-spots" ]
      }
    },
    "/parking-spots/{id}/setUnavailable" : {
      "put" : {
        "operationId" : "setParkingSpotUnavailable",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ParkingSpotSetUnavailableRequest"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpot"
                }
              }
            },
            "description" : "Parking spot set as unavailable successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Set a parking spot as unavailable (not usable for reservations). Automatically clears existing reservations.",
        "tags" : [ "parking-spots" ]
      }
    },
    "/parking-spots/{id}/setAvailable" : {
      "put" : {
        "operationId" : "setParkingSpotAvailable",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ParkingSpot"
                }
              }
            },
            "description" : "Parking spot set as available successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Set a parking spot as available (usable for reservations).",
        "tags" : [ "parking-spots" ]
      }
    },
    "/reservations" : {
      "get" : {
        "operationId" : "listReservations",
        "parameters" : [ {
          "description" : "Offset for pagination. When provided, server skips first n elements.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the page size for pagination.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 100,
            "minimum" : 1,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "By which field to sort the result.",
          "explode" : true,
          "in" : "query",
          "name" : "sortBy",
          "required" : false,
          "schema" : {
            "default" : "createdAt",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the order of results",
          "explode" : true,
          "in" : "query",
          "name" : "order",
          "required" : false,
          "schema" : {
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationListResponse"
                }
              }
            },
            "description" : "Reservations found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "List reservations",
        "tags" : [ "reservations" ]
      },
      "post" : {
        "operationId" : "createReservation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReservationWithVehicle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            },
            "description" : "Reservation created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Create a new reservation",
        "tags" : [ "reservations" ]
      }
    },
    "/reservations/{id}" : {
      "get" : {
        "operationId" : "getReservation",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            },
            "description" : "Reservation found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Get a reservation",
        "tags" : [ "reservations" ]
      },
      "patch" : {
        "operationId" : "updateReservation",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Reservation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            },
            "description" : "Reservation updated successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Update a reservation",
        "tags" : [ "reservations" ]
      }
    },
    "/reservations/{id}/cancel" : {
      "put" : {
        "operationId" : "cancelReservation",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReservationCancelResponse"
                }
              }
            },
            "description" : "Reservation cancelled successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Cancel a reservation",
        "tags" : [ "reservations" ]
      }
    },
    "/vehicles" : {
      "get" : {
        "operationId" : "listVehicles",
        "parameters" : [ {
          "description" : "Offset for pagination. When provided, server skips first n elements.",
          "explode" : true,
          "in" : "query",
          "name" : "offset",
          "required" : false,
          "schema" : {
            "default" : 0,
            "minimum" : 0,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the page size for pagination.",
          "explode" : true,
          "in" : "query",
          "name" : "limit",
          "required" : false,
          "schema" : {
            "default" : 100,
            "minimum" : 1,
            "type" : "number"
          },
          "style" : "form"
        }, {
          "description" : "By which field to sort the result.",
          "explode" : true,
          "in" : "query",
          "name" : "sortBy",
          "required" : false,
          "schema" : {
            "default" : "createdAt",
            "type" : "string"
          },
          "style" : "form"
        }, {
          "description" : "Specifies the order of results",
          "explode" : true,
          "in" : "query",
          "name" : "order",
          "required" : false,
          "schema" : {
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ],
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VehicleListResponse"
                }
              }
            },
            "description" : "Vehicles found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "List vehicles that are owned by the authenticated user, or all vehicles if administrative user",
        "tags" : [ "vehicles" ]
      },
      "post" : {
        "operationId" : "createVehicle",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vehicle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vehicle"
                }
              }
            },
            "description" : "Vehicle created successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Create a new vehicle",
        "tags" : [ "vehicles" ]
      }
    },
    "/vehicles/{id}" : {
      "get" : {
        "operationId" : "getVehicle",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vehicle"
                }
              }
            },
            "description" : "Vehicle found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Not found"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Get a vehicle",
        "tags" : [ "vehicles" ]
      },
      "patch" : {
        "operationId" : "updateVehicle",
        "parameters" : [ {
          "description" : "Id of the base entity",
          "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vehicle"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vehicle"
                }
              }
            },
            "description" : "Vehicle updated successfully"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Bad request"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Unauthorized"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Forbidden"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Conflict"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Conflict"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error"
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal server error"
          }
        },
        "summary" : "Update a vehicle",
        "tags" : [ "vehicles" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "Id" : {
        "description" : "Id of the base entity",
        "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
        "explode" : false,
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "OffsetQuery" : {
        "description" : "Offset for pagination. When provided, server skips first n elements.",
        "explode" : true,
        "in" : "query",
        "name" : "offset",
        "required" : false,
        "schema" : {
          "default" : 0,
          "minimum" : 0,
          "type" : "number"
        },
        "style" : "form"
      },
      "LimitQuery" : {
        "description" : "Specifies the page size for pagination.",
        "explode" : true,
        "in" : "query",
        "name" : "limit",
        "required" : false,
        "schema" : {
          "default" : 100,
          "minimum" : 1,
          "type" : "number"
        },
        "style" : "form"
      },
      "SortByQuery" : {
        "description" : "By which field to sort the result.",
        "explode" : true,
        "in" : "query",
        "name" : "sortBy",
        "required" : false,
        "schema" : {
          "default" : "createdAt",
          "type" : "string"
        },
        "style" : "form"
      },
      "OrderQuery" : {
        "description" : "Specifies the order of results",
        "explode" : true,
        "in" : "query",
        "name" : "order",
        "required" : false,
        "schema" : {
          "default" : "DESC",
          "enum" : [ "ASC", "DESC" ],
          "type" : "string"
        },
        "style" : "form"
      }
    },
    "responses" : {
      "BadRequest" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Bad request"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Bad request"
      },
      "Conflict" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Conflict"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Conflict"
      },
      "Forbidden" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Forbidden"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Forbidden"
      },
      "NoContent" : {
        "content" : {
          "application/json" : {
            "example" : { },
            "schema" : { }
          }
        },
        "description" : "No Content"
      },
      "NotFound" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Not found"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Not found"
      },
      "ServerError" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Internal server error"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Internal server error"
      },
      "Unauthorized" : {
        "content" : {
          "application/json" : {
            "example" : {
              "error" : "Unauthorized"
            },
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Unauthorized"
      }
    },
    "schemas" : {
      "IdField" : {
        "properties" : {
          "id" : {
            "description" : "The unique internal identifier for this object.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "AuditFields" : {
        "properties" : {
          "createdAt" : {
            "description" : "The time this object was created",
            "example" : "2021-01-30T10:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "createdBy" : {
            "description" : "Identifies the user that created this object.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          },
          "modifiedAt" : {
            "description" : "The time this object was created",
            "example" : "2021-01-30T10:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "modifiedBy" : {
            "description" : "Identifies the user that last modified this object.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ListResponse" : {
        "properties" : {
          "size" : {
            "description" : "The current page size.",
            "example" : 100,
            "readOnly" : true,
            "type" : "integer"
          },
          "total" : {
            "description" : "The total number of results",
            "example" : 1000,
            "readOnly" : true,
            "type" : "integer"
          },
          "number" : {
            "description" : "The current page number",
            "example" : 2,
            "readOnly" : true,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "ParkingSpotSetUnavailableRequest" : {
        "properties" : {
          "unavailabilityReason" : {
            "description" : "The optional reason for setting the parking spot unavailable",
            "example" : "LED Panel Maintenance",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "ReservationCancelResponse" : {
        "properties" : {
          "cancelledAt" : {
            "description" : "The time this reservation was created",
            "example" : "2021-01-30T10:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "cancelledBy" : {
            "description" : "Identifies the user that cancelled this reservations.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "UserUpdateRequest" : {
        "properties" : {
          "preferredLanguage" : {
            "description" : "The user's preferred language to which responses and UI will be internationalized.",
            "enum" : [ "en", "de", "fr" ],
            "example" : "en",
            "type" : "string"
          }
        },
        "required" : [ "preferredLanguage" ],
        "type" : "object"
      },
      "AvailabilityCheckRequest" : {
        "properties" : {
          "date" : {
            "description" : "The date for which to check available parking spots",
            "example" : "2022-12-24",
            "format" : "date",
            "type" : "string"
          },
          "userId" : {
            "description" : "Identifies the user for which a reservation is intended.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "vehicleId" : {
            "description" : "Identifies the vehicle for which a reservation is intended.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "halfDay" : {
            "description" : "Whether availability should be checked for a half-day reservation (false for full-day)",
            "example" : true,
            "type" : "boolean"
          },
          "am" : {
            "description" : "If halfDay is true, whether a reservation is intended ante- or post-meridian (morning or afternoon)",
            "example" : false,
            "type" : "boolean"
          }
        },
        "required" : [ "date", "userId", "vehicleId" ],
        "type" : "object"
      },
      "AvailabilityResponse" : {
        "properties" : {
          "availableParkingSpots" : {
            "items" : {
              "$ref" : "#/components/schemas/ParkingSpotWithReservationsAndVehicles"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "ParkingSpotWithReservationsAndVehicles" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ParkingSpot"
        }, {
          "$ref" : "#/components/schemas/ParkingSpotWithReservationsAndVehicles_allOf"
        } ],
        "type" : "object"
      },
      "ParkingSpot" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IdField"
        }, {
          "$ref" : "#/components/schemas/AuditFields"
        }, {
          "$ref" : "#/components/schemas/ParkingSpot_allOf"
        } ],
        "required" : [ "number" ],
        "type" : "object"
      },
      "ReservationWithVehicle" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Reservation"
        }, {
          "$ref" : "#/components/schemas/ReservationWithVehicle_allOf"
        } ],
        "type" : "object"
      },
      "Reservation" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IdField"
        }, {
          "$ref" : "#/components/schemas/AuditFields"
        }, {
          "$ref" : "#/components/schemas/Reservation_allOf"
        } ],
        "required" : [ "am", "date", "halfDay", "parkingSpotId", "userId", "vehicleId" ],
        "type" : "object"
      },
      "User" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IdField"
        }, {
          "$ref" : "#/components/schemas/AuditFields"
        }, {
          "$ref" : "#/components/schemas/User_allOf"
        } ],
        "type" : "object"
      },
      "Vehicle" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/IdField"
        }, {
          "$ref" : "#/components/schemas/AuditFields"
        }, {
          "$ref" : "#/components/schemas/Vehicle_allOf"
        } ],
        "required" : [ "licensePlateNumber", "make", "model", "type" ],
        "type" : "object"
      },
      "ParkingSpotListResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ListResponse"
        }, {
          "$ref" : "#/components/schemas/ParkingSpotListResponse_allOf"
        } ],
        "type" : "object"
      },
      "ReservationListResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ListResponse"
        }, {
          "$ref" : "#/components/schemas/ReservationListResponse_allOf"
        } ],
        "type" : "object"
      },
      "UserListResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ListResponse"
        }, {
          "$ref" : "#/components/schemas/UserListResponse_allOf"
        } ],
        "type" : "object"
      },
      "VehicleListResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ListResponse"
        }, {
          "$ref" : "#/components/schemas/VehicleListResponse_allOf"
        } ],
        "type" : "object"
      },
      "Error" : {
        "properties" : {
          "error" : {
            "example" : "Server error",
            "type" : "string"
          }
        },
        "required" : [ "error" ],
        "type" : "object"
      },
      "ParkingSpotWithReservationsAndVehicles_allOf" : {
        "properties" : {
          "reservations" : {
            "items" : {
              "$ref" : "#/components/schemas/ReservationWithVehicle"
            },
            "type" : "array"
          }
        },
        "type" : "object",
        "example" : null
      },
      "ParkingSpot_allOf" : {
        "properties" : {
          "number" : {
            "description" : "The unique number of the parking spot as painted on its surface.",
            "example" : 6,
            "format" : "int32",
            "minimum" : 1,
            "type" : "integer"
          },
          "chargerAvailable" : {
            "default" : false,
            "description" : "Indicates whether this parking spot is equipped with a charger for electric vehicles.",
            "example" : true,
            "type" : "boolean"
          },
          "unavailable" : {
            "default" : false,
            "description" : "Indicates whether this parking spot is available for reservations or not.",
            "example" : true,
            "type" : "boolean"
          },
          "unavailabilityReason" : {
            "description" : "Optionally indicates the reason for the parking spot having been set unavailable.",
            "type" : "string"
          }
        },
        "type" : "object",
        "example" : null
      },
      "ReservationWithVehicle_allOf" : {
        "properties" : {
          "vehicle" : {
            "$ref" : "#/components/schemas/Vehicle"
          }
        },
        "type" : "object",
        "example" : null
      },
      "Reservation_allOf" : {
        "properties" : {
          "parkingSpotId" : {
            "description" : "Identifies the parking spot reserved during the time of this reservation.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "userId" : {
            "description" : "Identifies the user that made this reservation.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "vehicleId" : {
            "description" : "Identifies the vehicle (owned by the reservation user) that is intended to be on the reserved parking spot during the time of this reservation.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "cancelled" : {
            "default" : false,
            "description" : "Indicates whether this reservation is in cancelled state and is therefore removed from capacity checks.",
            "example" : false,
            "readOnly" : true,
            "type" : "boolean"
          },
          "date" : {
            "description" : "The date on which this reservation is effective.",
            "example" : "2021-12-31",
            "format" : "date",
            "type" : "string"
          },
          "startTime" : {
            "description" : "The beginning time of this reservation in ISO 8601 full-time format.",
            "example" : "2021-01-30T08:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "endTime" : {
            "description" : "The ending time of this reservation in ISO 8601 full-time format.",
            "example" : "2021-01-30T10:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "halfDay" : {
            "default" : false,
            "description" : "Indicates whether this reservation was created as a half-day or full-day reservation.",
            "example" : true,
            "type" : "boolean"
          },
          "am" : {
            "description" : "Indicates, if this reservation is a half-day reservation, whether the half day is ante- or post meridian (first, or second half of the day).",
            "example" : true,
            "type" : "boolean"
          },
          "cancelledAt" : {
            "description" : "The time this reservation was cancelled at",
            "example" : "2021-01-30T10:30:00Z",
            "format" : "date-time",
            "readOnly" : true,
            "type" : "string"
          },
          "cancelledBy" : {
            "description" : "Identifies the user that cancelled this reservations.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object",
        "example" : null
      },
      "User_allOf" : {
        "properties" : {
          "oktaId" : {
            "description" : "The Okta unique user ID as synced from the login session.",
            "example" : "ABCD1234@AdobeOrg",
            "readOnly" : true,
            "type" : "string"
          },
          "disabled" : {
            "default" : false,
            "example" : true,
            "type" : "boolean"
          },
          "email" : {
            "description" : "The email of the user as synced from the Okta login session.",
            "example" : "someuser@adobe.com",
            "format" : "email",
            "readOnly" : true,
            "type" : "string"
          },
          "firstName" : {
            "description" : "The first of the user as synced from the Okta login session.",
            "example" : "Jane",
            "readOnly" : true,
            "type" : "string"
          },
          "lastName" : {
            "description" : "The last name of the user as synced from the Okta login session.",
            "example" : "Doe",
            "readOnly" : true,
            "type" : "string"
          },
          "preferredLanguage" : {
            "default" : "en",
            "description" : "The user's preferred language to which responses and UI will be internationalized.",
            "enum" : [ "en", "de", "fr" ],
            "example" : "en",
            "type" : "string"
          },
          "userName" : {
            "description" : "The username of the user as synced from the Okta login session.",
            "example" : "someuser",
            "readOnly" : true,
            "type" : "string"
          }
        },
        "type" : "object",
        "example" : null
      },
      "Vehicle_allOf" : {
        "properties" : {
          "userId" : {
            "description" : "Identifies the user that owns this vehicle.",
            "example" : "ccf8d1c6-f927-4e51-8de4-4d4a4f4be623",
            "format" : "uuid",
            "type" : "string"
          },
          "ev" : {
            "default" : false,
            "description" : "Indicates whether this vehicle is an electric vehicle, i.e. might benefit from a parking spot with electrical charger available.",
            "example" : true,
            "type" : "boolean"
          },
          "licensePlateNumber" : {
            "description" : "The unique and full license plate number as affixed to the vehicle.",
            "example" : "ABC123",
            "type" : "string"
          },
          "make" : {
            "description" : "The name of the maker (manufacturer) of the vehicle.",
            "example" : "Ford",
            "type" : "string"
          },
          "model" : {
            "description" : "The name of the specific vehicle model.",
            "example" : "Focus",
            "type" : "string"
          },
          "type" : {
            "description" : "Indicates whether this vehicle is a car or a motorcycle.",
            "enum" : [ "car", "motorcycle" ],
            "type" : "string"
          }
        },
        "type" : "object",
        "example" : null
      },
      "ParkingSpotListResponse_allOf" : {
        "properties" : {
          "parkingSpots" : {
            "items" : {
              "$ref" : "#/components/schemas/ParkingSpot"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object",
        "example" : null
      },
      "ReservationListResponse_allOf" : {
        "properties" : {
          "reservations" : {
            "items" : {
              "$ref" : "#/components/schemas/ReservationWithVehicle"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object",
        "example" : null
      },
      "UserListResponse_allOf" : {
        "properties" : {
          "users" : {
            "items" : {
              "$ref" : "#/components/schemas/User"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object",
        "example" : null
      },
      "VehicleListResponse_allOf" : {
        "properties" : {
          "vehicles" : {
            "items" : {
              "$ref" : "#/components/schemas/Vehicle"
            },
            "readOnly" : true,
            "type" : "array"
          }
        },
        "type" : "object",
        "example" : null
      }
    }
  }
}
